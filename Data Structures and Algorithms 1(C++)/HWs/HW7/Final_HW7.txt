//CSE283 HW2:  Sparse Vector Operations  by C.-Y. (Roger) Chen
#include <iostream>
using namespace std;

class element {
public:
	int value;
	int position;
	element * next;
	element(int v, int p) { value = v; position = p; next = nullptr; }
	element() { next = nullptr; }
};

class vector {
public:
	int vec_size;
	int num_elements;
	element * head;
	vector(int v) { vec_size = v; num_elements = 0; head = nullptr; }
	vector() { vec_size = 0; num_elements = 0; head = nullptr; }
	~vector() { // destructor
		cout << "Destructor invoked" << endl;
		// for this I have to parse through the entire vector and delete element by element
		element * p1 = head;
		element * p2 = head->next;
		while (p1 != nullptr) {
			p2 = p1->next;
			delete p1;
			p1 = p2;
		}
		// ??? How can I test this?
	}

	void add_element(int v, int p);
	void input_vector();
	void print_vector();
	vector operator+(vector &v);
	int operator*(vector &v);

	vector(const vector &V) { // copy constructor -- left ref copy constructor WORKING!
		cout << "copy constructor invoked" << endl;
		vec_size = V.vec_size;
		num_elements = V.num_elements;

		// TO-DO parse elements from V into new vector

		head = new element(V.head->value, V.head->position);
		element * p = V.head->next;
		element * p1 = head;
		while (p != nullptr) { // Will parse through vector and
			element * p2 = new element(p->value, p->position);
			p1->next = p2; // Makes the previous element point to new element
			p1 = p2; // Makes p1 point to current element
			p = p->next; // Go to next element
		}

	} // end of copy constructor

	vector(vector &&V){ // move constructor -- right ref copy constructor
		cout << "move constructor invoked" << endl;
		vec_size = V.vec_size;
		num_elements = V.num_elements;

		// Transferring owner of element linked list
		head = V.head; // This assigns the head of our new vector to the head of our old one
		V.head = nullptr; // This removes our old vector's access to the linked list
	}

	void operator=(vector &V) { // left ref operator=
		vec_size = V.vec_size;
		num_elements = V.num_elements;


		element * p = V.head->next;
		element * p1 = head;
		while (p != nullptr) { // Will parse through vector and
			element * p2 = new element(p->value, p->position);
			p1->next = p2; // Makes the previous element point to new element
			p1 = p2; // Makes p1 point to current element
			p = p->next; // Go to next element
			num_elements++; // Increment number of elements
		}

	}
	void operator=(vector &&V) { // right ref = operator

		vec_size = V.vec_size;
		num_elements = V.num_elements;

		// Transferring owner of element linked list
		head = V.head; // This assigns the head of our new vector to the head of our old one
		V.head = nullptr; // This removes our old vector's access to the linked list
	}
};

void vector::add_element(int v, int p) {
	element * p1 = new element(v, p);
	if (num_elements == 0) {
		head = p1; num_elements++; return;
	}
	if (p < head->position) { // Checks to see if p1 should be first vector
		p1->next = head; head = p1; num_elements++; return;
	}
	element * p2 = head;
	while (p2->next != nullptr && !(p > p2->position && p < p2->next->position)) {
		p2 = p2->next;
	}
	if (p2->next == nullptr) { p2->next = p1; num_elements++; return; }
	p1->next = p2->next;
	p2->next = p1;
	num_elements++;
}

void vector::input_vector() {
	int v_size, n_ele;
	cout << "Enter vector size and number of elements" << endl;
	cin >> v_size >> n_ele;
	vec_size = v_size;
	int v, p;
	cout << "Enter elements in value position pairs" << endl;
	for (int i = 0; i < n_ele; i++) {
		cin >> v >> p;
		add_element(v, p);
	}
}
void vector::print_vector() {
	element * p = head;
	if (p == nullptr) cout << "vector is empty" << endl;
	while (p != nullptr) {
		cout << p->value << " " << p->position << "   ";
		p = p->next;
	}
	cout << " " << endl;

}

vector vector::operator+(vector &v) {
	element * p1 = head, *p2 = v.head;
	if (vec_size != v.vec_size) { return -1; } // You can't add vectors of different sizes
	vector temp;
	temp.vec_size = vec_size;

	if (p1 == nullptr) { return v; }
	if (p2 == nullptr) { return *this; }

	while (p1 != nullptr && p2 != nullptr) {
		if (p1->position == p2->position) {
			int temp_val = p1->value + p2->value;
			temp.add_element(temp_val, p1->position);
			p1 = p1->next; // move to next element
			p2 = p2->next; // move to next element
		}
		else if (p1->position < p2->position) {
			temp.add_element(p1->value, p1->position);
			p1 = p1->next;
		}

		else if (p2->position < p1->position) {
			temp.add_element(p2->value, p2->position);
			p2 = p2->next;
		}

		if (p1 == nullptr) { temp.add_element(p2->value, p2->position); }
		if (p2 == nullptr) { temp.add_element(p1->value, p1->position); }

	}// end of while loop

	return temp;

}

int vector::operator*(vector &v) {
	element *p1 = head, *p2 = v.head;
	int result = 0;

	if (vec_size != v.vec_size) { return -1; }// You cant get inner products of vectors with different sizes
	if (head == nullptr) { return 0; }
	if (v.head == nullptr) { return 0; }

	while (p1 != nullptr && p2 != nullptr) {
		if (p1->position == p2->position) {
			int temp_val = (p1->value * p2->value);
			result += temp_val;
			p1 = p1->next; // move to next element
			p2 = p2->next; // move to next element
		}
		else if (p1->position < p2->position) {

			p1 = p1->next;
		}

		else if (p2->position < p1->position) {

			p2 = p2->next;
		}

		if (p1 == nullptr) {}
		if (p2 == nullptr) {}


	} // end of while loop
	return result;
}

int main() {
	vector v1, v2, v3;
	v1.input_vector();
	v1.print_vector();

	cout << "should now invoke copy constructor" << endl;
	vector v4 = v1; // invoking copy constructor
	cout << "v4 vector created copied from v1 and will now be printed" << endl;
	v4.print_vector();

	cout << "should now invoke move constructor" << endl;
	vector v5 = move(v1); // invoking move constructor
	cout << "Printing out v5 which should be the same as v1" << endl;
	v5.print_vector();
	cout << "next should return empty vector" << endl;
	v1.print_vector();

	//v2.input_vector();
	//v2.print_vector();
	/*cout << endl << "V3" << endl; // To make output easier to read
	//v3 = v1 + v2; // ???why is this giving me an error?
	v3.print_vector();
	cout << v1*v2 << endl;*/


	getchar();
	getchar();
	return 0;


}
