//CSE283 HW3 Sparse Matrix Operations

//Xiaozhi Li

//Spring 2017
//Due: 11:59pm Friday, Feb. 10

//You need to complete the implementation for member funcitons add_element(done), operator+(done), and operator*(done).
//Feel free to modify my code to fit your need.
//You need to try sufficient test cases in main function.

//The following are the three matrices for you to try.
//10 1 1 25 1 3 50 2 2 80 3 2 100 3 3             For m1:  3 rows, 3 columns, 5 elements

//-1 1 3 -1 1 4 1 2 2 2 3 1 1 3 2 1 3 4           For m2: 3 rows, 4 columns, 6 elements

//-10 1 1 20 1 2 20 2 1 30 3 2			  For m4: 3 rows, 3 columns, 4 elements


//Partial code written by C-Y (Roger) Chen
#include <iostream>
#include <vector>
#include <string>
using namespace std;

class node {
public:
	int value;
	int r_pos;
	int c_pos;
	node *r_next;
	node *c_next;
	node() { r_next = nullptr; c_next = nullptr; }
	node(int v, int r, int c) { value = v; r_pos = r; c_pos = c; r_next = nullptr; c_next = nullptr; }
};

class my_matrix {
public:
	string m_name;
	int num_rows;
	int num_cols;
	int num_elements;
	vector<node *> r_vec;
	vector<node *> c_vec;
	my_matrix() {};
	my_matrix operator+(my_matrix m);
	my_matrix operator*(my_matrix m);
	void matrix_input();
	void matrix_print_r();
	void matrix_print_c();
	void add_element(int v, int r, int c);

};

void my_matrix::add_element(int v, int r, int c) {
	//YOU NEED TO IMPLEMENT THIS !!
	node *toAdd = new node(v, r, c);
	if (r >= num_rows || c >= num_cols) {

		cout << "This element v = " << v << "  r = " << r << "  c = " << c << " is out of bound." << endl;
		cout << "num_rows: " << num_rows << " numcols:" << num_cols << endl;
		return;
	}
	//rows
	//if that row is empty
	if (r_vec[r] == nullptr) {
		r_vec[r] = toAdd;
	}
	//if toAdd is smaller in c_pos
	//than the first node in r_vec
	else if (c < r_vec[r]->c_pos) {
		toAdd->r_next = r_vec[r];
		r_vec[r] = toAdd;

	}
	//if toAdd is larger in c_pos
	else {

		node* p2 = r_vec[r];
		//find until it is someone in between
		while (p2->r_next != nullptr && !(p2->c_pos <toAdd->c_pos && p2->r_next->c_pos > toAdd->c_pos)) {
			p2 = p2->r_next;
		}
		//if it is the end of the list
		if (p2->r_next == nullptr) {
			p2->r_next = toAdd;

		}
		//if it is not the end of the list
		else {
			toAdd->r_next = p2->r_next;
			p2->r_next = toAdd;

		}
	}

	//columns
	//if that column is empty
	if (c_vec[c] == nullptr) {
		c_vec[c] = toAdd;
		return;
	}
	//if toAdd is smaller in r_pos
	//than the first node in c_vec
	else if (r < c_vec[c]->r_pos) {
		toAdd->c_next = c_vec[c];
		c_vec[c] = toAdd;


		return;
	}
	//if toAdd is larger in c_pos
	else {
		node* p2 = c_vec[c];
		//find until it is someone in between
		while (p2->c_next != nullptr && !(p2->r_pos <toAdd->r_pos && p2->c_next->r_pos > toAdd->r_pos)) {
			p2 = p2->c_next;
		}


		//if it is the end of the list
		if (p2->c_next == nullptr) {
			p2->c_next = toAdd;


			return;
		}
		//if it is not the end of the list
		else {
			toAdd->c_next = p2->c_next;
			p2->c_next = toAdd;


			return;
		}
	}
	//too many rs and cs.

	return;
}


void my_matrix::matrix_input() {
	int v, r, c;
	string s;
	cout << "Enter Matrix name, number of rows, number of columns, separated by space: \n";
	cin >> m_name >> num_rows >> num_cols;
	r_vec.assign(num_rows, nullptr);
	c_vec.assign(num_cols, nullptr);
	cout << "\nEnter number of elements:\n";
	cin >> num_elements;
	cout << "\nEnter elements: value, row, col, separated by space:\n";
	for (int i = 0; i < num_elements; i++) { cin >> v >> r >> c; add_element(v, r, c); }
}


void my_matrix::matrix_print_r() {

	int i;
	node *p1;
	for (i = 0; i < num_rows; i++) {
		p1 = r_vec[i];
		while (p1 != nullptr) { cout << "( " << p1->value << " , " << p1->r_pos << " , " << p1->c_pos << " )"; p1 = p1->r_next; }
	}
	cout << "row printing ended" << endl;

}

void my_matrix::matrix_print_c() {

	int i;
	node *p1;
	for (i = 0; i < num_cols; i++) {
		p1 = c_vec[i];
		while (p1 != nullptr) { cout << "( " << p1->value << " , " << p1->r_pos << " , " << p1->c_pos << " )"; p1 = p1->c_next; }
	}
	cout << "column printing ended" << endl;

}

my_matrix my_matrix::operator*(my_matrix m) {

	my_matrix temp;


	if (num_cols !=m.num_rows ) {
		cout << "Error: cannot multiply these two matrix, they are not compatitable." << endl;
		return temp;
	}
	if (m.num_elements == 0 || num_elements==0) {
			return temp;
	}
	node * p1=r_vec[0];
	node * p2=m.c_vec[0];
	int product = 0;
	temp.num_rows = num_rows;
	temp.num_cols = m.num_cols;
	temp.r_vec.assign(num_rows, nullptr);
	temp.c_vec.assign(m.num_cols, nullptr);




	for (int i = 0; i < num_rows; i++) {

		for (int j = 0; j < m.num_cols; j++) {
			p1 = r_vec[i];
			p2 = m.c_vec[j];
			int inner_product = 0;
			while (p1 != nullptr && p2 != nullptr) {
				//if (p1 == nullptr &&p2 == nullptr) break;

				 if (p1->c_pos < p2->r_pos) {
					p1 = p1->r_next;
				}
				else if (p1->c_pos > p2->r_pos) {
					p2 = p2->c_next;
				}
				else if (p1->c_pos == p2->r_pos) {
					inner_product += p1->value * p2->value;
					p1 = p1->r_next;
					p2 = p2->c_next;
				}
			}
			if (inner_product != 0) {
				temp.add_element(inner_product, i, j);
				temp.num_elements++;
			}
		}
	}

	return temp;
}


my_matrix my_matrix::operator+(my_matrix m) {
	//done
	my_matrix temp;
	if (num_cols != m.num_cols || num_rows != m.num_rows) {
		cout << "Error: cannot add these two matrix, they are differnt in size." << endl;
		temp.m_name = m_name;
		temp.num_elements = num_elements;
		temp.num_cols = num_cols;
		temp.num_rows = temp.num_rows;
		temp.r_vec = r_vec;
		temp.c_vec = c_vec;
		return temp;
	}

	if (num_elements == 0) { 	return m; }
	if (m.num_elements == 0) {
		temp.m_name = m_name;
		temp.num_elements = num_elements;
		temp.num_cols = num_cols;
		temp.num_rows = temp.num_rows;
		temp.r_vec = r_vec;
		temp.c_vec = c_vec;
		return temp; }

	node *p1;
	node *p2;
	temp.num_cols = num_cols;
	temp.num_rows = num_rows;
	temp.r_vec.assign(num_rows,nullptr);
	temp.c_vec.assign(num_cols,nullptr);
	for (int i = 0; i < num_rows; i++) {

		p1 = r_vec[i];
		p2 = m.r_vec[i];

		//code from vector
		while (p1 != nullptr || p2 != nullptr) {

			if (p1 == nullptr && p2 == nullptr) break;
			if (p1 == nullptr) {
				cout << "p1 is null" << endl;
				temp.add_element(p2->value, p2->r_pos, p2->c_pos);
				temp.num_elements++;
				if(p2->c_next !=nullptr) p2 = p2->r_next;
				else break;
			}
			else if (p2 == nullptr) {
				temp.add_element(p1->value, p1->r_pos, p1->c_pos);
				temp.num_elements++;
				if(p1->c_next !=nullptr) p1 = p1->r_next;
				else break;

			}
			else if (p1->c_pos < p2->c_pos) { temp.add_element(p1->value, p1->r_pos, p1->c_pos); p1 = p1->r_next; }
			else if (p1->c_pos > p2->c_pos) { temp.add_element(p2->value, p2->r_pos, p2->c_pos); p2 = p2->r_next; }
			else if (p1->c_pos == p2->c_pos) {
				if (p1->value + p2->value != 0) {
					int k = p1->value + p2->value;
					int g = p1->r_pos;
					int h = p1->c_pos;
					//these are redundant, but helped debugging
					if (k != 0) {
						temp.add_element(k, g, h);
						temp.num_elements++;
					}
				}
				p1 = p1->r_next;
				p2 = p2->r_next;
			}

		}
	}
	//addition operator successed.
	return temp;
}


int main() {

	my_matrix m1, m2, m3, m4, m5;
	m1.matrix_input();
	m1.matrix_print_r(); //row-oriented printing
	cout << "\n";
	m1.matrix_print_c(); //column-oriented printing
	cout << "\n";

	m2.matrix_input();
	m2.matrix_print_r();
	cout << "\n";
	m2.matrix_print_c();
	cout << "m3= m1 *m2 :" << endl;

	m3 = m1*m2;
	cout << "\n";
	cout << "m3 size: "<<m3.num_elements << "  m3 rows: " << m3.num_rows << "  m3 cols: " << m3.num_cols << endl;
	m3.matrix_print_r();
	cout << "\n";
	m3.matrix_print_c();
	cout << "\n";
	m4.matrix_input();
	m4.matrix_print_r();
	cout << "\n";
	m4.matrix_print_c();
	m5 = m1 + m4;
	cout << "\n";
	m5.matrix_print_r();
	cout << "\n";
	m5.matrix_print_c();

	getchar();
	getchar();
	return 0;
}
