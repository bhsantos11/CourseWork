//template

#include <iostream>
using namespace std;

class Three_D_2 {
public:
	int ht;
	int wid;
	int dep;
	Three_D_2() { ht = wid = dep = 0; }
	Three_D_2(int i, int j, int k) { ht = i; wid = j; dep = k; }
	int vol() { return ht*wid*dep; }
	int area() { return 2 * (ht*wid + wid*dep + ht * dep); }
};

class Three_D_1 {
public:
	double ht;
	double wid;
	double dep;
	Three_D_1() { ht = wid = dep = 0; }
	Three_D_1(double i, double j, double k) { ht = i; wid = j; dep = k; }
	double vol() { return ht*wid*dep; }
	double area() { return 2 * (ht*wid + wid*dep + ht * dep); }
};


template <class T, class T1> class Three_D {

	public:
		T ht;
		T1 wid;
		T1 dep;
		Three_D() { ht = wid = dep = 0; }
		Three_D(T i, T j, T k) { ht = i; wid = j; dep = k; }
		T vol() { return ht*wid*dep; }
		T area();
	};
template <class T,T1> T Three_D<T,T1>:: area() { return 2 * (ht*wid + wid*dep + ht * dep); }

int main() {

	Three_D<int, double> i1(3, 4, 5);
	Three_D<double, double> d1(3.3, 4.4, 5.5);

	getchar();
	getchar();
	return 0;
}
//i = max(3,5);  j = min(3,4);//include <algorithm>
